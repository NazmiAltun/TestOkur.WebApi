version: '3.7'

services:
  redis:
    image: redis:alpine
  rabbitmq:
    image: rabbitmq:alpine
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
  postgres:
    image: nazmialtun/postgres-tr
    environment:
      - POSTGRES_PASSWORD=testadmin@123
      - POSTGRES_USER=testokur
      - POSTGRES_DB=testokur
  mockserver:
    image: nazmialtun/mockizen:latest
    volumes:
      - ./mockserver/mocks:/opt/app/mocks
    expose:
      - '8080'
  mongo:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    ports:
      - '27017:27017'
  notification-unit-test:
    image: testokur-notification-unit-test
    container_name: notification-unit-test
    build:
      context: .
      dockerfile: src/TestOkur.Notification/Dockerfile
      target: unittest
    entrypoint:
      - dotnet
      - test
      - /p:CollectCoverage=true 
      - /p:CoverletOutput=../../../coverage/notification-unit-test
      - /p:CoverletOutputFormat="opencover"
    volumes:
      - /tmp/coverage/:/coverage
  webapi-unit-test:
    image: testokur-webapi-unit-test
    container_name: webapi-unit-test
    build:
      context: .
      dockerfile: src/TestOkur.WebApi/Dockerfile
      target: unittest
    entrypoint:
      - dotnet
      - test
      - /p:CollectCoverage=true 
      - /p:CoverletOutput=../../../coverage/webapi-unit-test
      - /p:CoverletOutputFormat="opencover"
    volumes:
      - /tmp/coverage/:/coverage
  domain-unit-test:
    image: testokur-domain-unit-test
    container_name: domain-unit-test
    build:
      context: .
      dockerfile: src/TestOkur.WebApi/Dockerfile
      target: domaintest
    entrypoint:
      - dotnet
      - test
      - /p:CollectCoverage=true 
      - /p:CoverletOutput=../../../coverage/domain-unit-test
      - /p:CoverletOutputFormat="opencover"
    volumes:
      - /tmp/coverage/:/coverage
  webapi-integration-test:
    image: testokur-webapi-integration-test
    container_name: webapi-integration-test
    build:
      context: .
      dockerfile: src/TestOkur.WebApi/Dockerfile
      target: integrationtest
    entrypoint:
      - dotnet
      - test
      - /p:CollectCoverage=true 
      - /p:CoverletOutput=../../../coverage/webapi-integration-test
      - /p:CoverletOutputFormat="opencover"
    volumes:
      - /tmp/coverage/:/coverage
    depends_on:
      - rabbitmq
      - redis
      - postgres
      - mockserver
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__Postgres=Server=postgres;Database=testokur;User Id=testokur;Password=testadmin@123
      - ConnectionStrings__Redis=redis,allowAdmin=true,defaultDatabase=1
      - ApplicationConfiguration__Postgres=Server=postgres;Database=testokur;User Id=testokur;Password=testadmin@123
      - RabbitMqConfiguration__Uri=rabbitmq
      - OAuthConfiguration__Authority=http://mockserver:8080/
  report-unit-test:
    image: testokur-report-unit-test
    container_name: report-unit-test
    build:
      context: .
      dockerfile: src/TestOkur.Report/Dockerfile
      target: unittest
    entrypoint:
      - dotnet
      - test
      - /p:CollectCoverage=true 
      - /p:CoverletOutput=../../../coverage/report-unit-test
      - /p:CoverletOutputFormat="opencover"
    volumes:
      - /tmp/coverage/:/coverage
  report-integration-test:
    image: testokur-report-integration-test
    container_name: report-integration-test
    build:
      context: .
      dockerfile: src/TestOkur.Report/Dockerfile
      target: integrationtest
    command: sh -c "/wait && dotnet test /p:CollectCoverage=true /p:CoverletOutput=../../../coverage/report-integration-test /p:CoverletOutputFormat='opencover'"
    volumes:
      - /tmp/coverage/:/coverage
    depends_on:
      - mongo
      - rabbitmq
      - mockserver
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - WAIT_HOSTS= rabbitmq:5672, mongo:27017, mockserver:8080
      - WAIT_HOSTS_TIMEOUT=300
      - RabbitMqConfiguration__Uri=rabbitmq
      - ReportConfiguration__ConnectionString=mongodb://root:root@mongo
      - OAuthConfiguration__Authority=http://mockserver:8080/
  notification-integration-test:
    image: testokur-notification-integration-test
    container_name: notification-integration-test
    build:
      context: .
      dockerfile: src/TestOkur.Notification/Dockerfile
      target: integrationtest
    command: sh -c "/wait && dotnet test /p:CollectCoverage=true /p:CoverletOutput=../../../coverage/notification-integration-test /p:CoverletOutputFormat='opencover'"
    volumes:
      - /tmp/coverage/:/coverage
    depends_on:
      - rabbitmq
      - mockserver
      - mongo
    environment:
      - WAIT_HOSTS= rabbitmq:5672, mockserver:8080, mongo:27017
      - WAIT_HOSTS_TIMEOUT=300
      - ASPNETCORE_ENVIRONMENT=Development
      - RabbitMqConfiguration__Uri=rabbitmq
      - OAuthConfiguration__Authority=http://mockserver:8080/
      - WebApiUrl=http://mockserver:8080/
      - SmsConfiguration__ServiceUrl=http://mockserver:8080/
      - ApplicationConfiguration__ConnectionString=mongodb://root:root@mongo
  coverage-merger:
    image: report-merger
    build:
      context: .
      dockerfile: coverageMerger.Dockerfile
    volumes:
      - /tmp/coverage/:/reports