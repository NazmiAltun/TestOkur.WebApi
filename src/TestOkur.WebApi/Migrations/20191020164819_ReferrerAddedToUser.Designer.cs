// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TestOkur.Data;

namespace TestOkur.WebApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20191020164819_ReferrerAddedToUser")]
    partial class ReferrerAddedToUser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("Relational:Sequence:.appsettings_seq", "'appsettings_seq', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.exam_type_optical_form_seq", "'exam_type_optical_form_seq', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.exam_types_seq", "'exam_types_seq', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.exams_seq", "'exams_seq', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.form_lesson_sections_seq", "'form_lesson_sections_seq', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.lessons_seq", "'lessons_seq', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.optical_form_definitions_seq", "'optical_form_definitions_seq', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.optical_form_text_locations_seq", "'optical_form_text_locations_seq', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.optical_form_types_seq", "'optical_form_types_seq', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.subjects_seq", "'subjects_seq', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.units_seq", "'units_seq', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.user_seq", "'user_seq', '', '1', '10', '', '', 'Int64', 'False'");

            modelBuilder.Entity("TestOkur.Domain.Model.CityModel.City", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_cities");

                    b.ToTable("cities");
                });

            modelBuilder.Entity("TestOkur.Domain.Model.CityModel.District", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<long?>("city_id")
                        .HasColumnName("city_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_districts");

                    b.HasIndex("city_id")
                        .HasName("ix_districts_city_id");

                    b.ToTable("districts");
                });

            modelBuilder.Entity("TestOkur.Domain.Model.ClassroomModel.Classroom", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOnUTC")
                        .HasColumnName("created_on_utc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOnUTC")
                        .HasColumnName("updated_on_utc")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id")
                        .HasName("pk_classrooms");

                    b.HasIndex("CreatedBy")
                        .HasName("ix_classrooms_created_by");

                    b.ToTable("classrooms");
                });

            modelBuilder.Entity("TestOkur.Domain.Model.ExamModel.AnswerFormFormat", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_answer_form_format");

                    b.ToTable("answer_form_format");
                });

            modelBuilder.Entity("TestOkur.Domain.Model.ExamModel.Exam", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "exams_seq")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("ApplicableFormTypeCode")
                        .HasColumnName("applicable_form_type_code")
                        .HasColumnType("text");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOnUTC")
                        .HasColumnName("created_on_utc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("ExamBookletTypeId")
                        .HasColumnName("exam_booklet_type_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ExamDate")
                        .HasColumnName("exam_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Notes")
                        .HasColumnName("notes")
                        .HasColumnType("text");

                    b.Property<bool>("Shared")
                        .HasColumnName("shared")
                        .HasColumnType("boolean");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOnUTC")
                        .HasColumnName("updated_on_utc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("answer_form_format_id")
                        .HasColumnName("answer_form_format_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("exam_type_id")
                        .HasColumnName("exam_type_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("lesson_id")
                        .HasColumnName("lesson_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_exams");

                    b.HasIndex("CreatedBy")
                        .HasName("ix_exams_created_by");

                    b.HasIndex("ExamBookletTypeId")
                        .HasName("ix_exams_exam_booklet_type_id");

                    b.HasIndex("answer_form_format_id")
                        .HasName("ix_exams_answer_form_format_id");

                    b.HasIndex("exam_type_id")
                        .HasName("ix_exams_exam_type_id");

                    b.HasIndex("lesson_id")
                        .HasName("ix_exams_lesson_id");

                    b.ToTable("exams");
                });

            modelBuilder.Entity("TestOkur.Domain.Model.ExamModel.ExamBookletType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_exam_booklet_type");

                    b.ToTable("exam_booklet_type");
                });

            modelBuilder.Entity("TestOkur.Domain.Model.ExamModel.ExamScanSession", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("ByCamera")
                        .HasColumnName("by_camera")
                        .HasColumnType("boolean");

                    b.Property<bool>("ByFile")
                        .HasColumnName("by_file")
                        .HasColumnType("boolean");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOnUTC")
                        .HasColumnName("created_on_utc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EndDateTimeUtc")
                        .HasColumnName("end_date_time_utc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ReportId")
                        .HasColumnName("report_id")
                        .HasColumnType("uuid");

                    b.Property<int>("ScannedStudentCount")
                        .HasColumnName("scanned_student_count")
                        .HasColumnType("integer");

                    b.Property<string>("Source")
                        .HasColumnName("source")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDateTimeUtc")
                        .HasColumnName("start_date_time_utc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOnUTC")
                        .HasColumnName("updated_on_utc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("exam_id")
                        .HasColumnName("exam_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_exam_scan_sessions");

                    b.HasIndex("CreatedBy")
                        .HasName("ix_exam_scan_sessions_created_by");

                    b.HasIndex("exam_id")
                        .HasName("ix_exam_scan_sessions_exam_id");

                    b.ToTable("exam_scan_sessions");
                });

            modelBuilder.Entity("TestOkur.Domain.Model.ExamModel.ExamType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "exam_types_seq")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<bool>("AvailableForHighSchool")
                        .HasColumnName("available_for_high_school")
                        .HasColumnType("boolean");

                    b.Property<bool>("AvailableForPrimarySchool")
                        .HasColumnName("available_for_primary_school")
                        .HasColumnType("boolean");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOnUTC")
                        .HasColumnName("created_on_utc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOnUTC")
                        .HasColumnName("updated_on_utc")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id")
                        .HasName("pk_exam_types");

                    b.HasIndex("CreatedBy")
                        .HasName("ix_exam_types_created_by");

                    b.ToTable("exam_types");
                });

            modelBuilder.Entity("TestOkur.Domain.Model.ExamModel.ExamTypeOpticalFormType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "exam_type_optical_form_seq")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<long?>("ExamTypeId")
                        .HasColumnName("exam_type_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("optical_form_type_id")
                        .HasColumnName("optical_form_type_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_exam_type_optical_form_types");

                    b.HasIndex("ExamTypeId")
                        .HasName("ix_exam_type_optical_form_types_exam_type_id");

                    b.HasIndex("optical_form_type_id")
                        .HasName("ix_exam_type_optical_form_types_optical_form_type_id");

                    b.ToTable("exam_type_optical_form_types");
                });

            modelBuilder.Entity("TestOkur.Domain.Model.LessonModel.Lesson", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "lessons_seq")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<int>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOnUTC")
                        .HasColumnName("created_on_utc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOnUTC")
                        .HasColumnName("updated_on_utc")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id")
                        .HasName("pk_lessons");

                    b.HasIndex("CreatedBy")
                        .HasName("ix_lessons_created_by");

                    b.ToTable("lessons");
                });

            modelBuilder.Entity("TestOkur.Domain.Model.LessonModel.Subject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "subjects_seq")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<int>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOnUTC")
                        .HasColumnName("created_on_utc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Shared")
                        .HasColumnName("shared")
                        .HasColumnType("boolean");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOnUTC")
                        .HasColumnName("updated_on_utc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("unit_id")
                        .HasColumnName("unit_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_subjects");

                    b.HasIndex("CreatedBy")
                        .HasName("ix_subjects_created_by");

                    b.HasIndex("unit_id")
                        .HasName("ix_subjects_unit_id");

                    b.ToTable("subjects");
                });

            modelBuilder.Entity("TestOkur.Domain.Model.LessonModel.Unit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "units_seq")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<int>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOnUTC")
                        .HasColumnName("created_on_utc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LessonId")
                        .HasColumnName("lesson_id")
                        .HasColumnType("bigint");

                    b.Property<bool>("Shared")
                        .HasColumnName("shared")
                        .HasColumnType("boolean");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOnUTC")
                        .HasColumnName("updated_on_utc")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id")
                        .HasName("pk_units");

                    b.HasIndex("CreatedBy")
                        .HasName("ix_units_created_by");

                    b.HasIndex("LessonId")
                        .HasName("ix_units_lesson_id");

                    b.ToTable("units");
                });

            modelBuilder.Entity("TestOkur.Domain.Model.OpticalFormModel.Direction", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id")
                        .HasName("pk_directions");

                    b.ToTable("directions");
                });

            modelBuilder.Entity("TestOkur.Domain.Model.OpticalFormModel.FormLessonSection", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "form_lesson_sections_seq")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<int>("FormPart")
                        .HasColumnName("form_part")
                        .HasColumnType("integer");

                    b.Property<int>("ListOrder")
                        .HasColumnName("list_order")
                        .HasColumnType("integer");

                    b.Property<int>("MaxQuestionCount")
                        .HasColumnName("max_question_count")
                        .HasColumnType("integer");

                    b.Property<string>("NameTag")
                        .HasColumnName("name_tag")
                        .HasColumnType("text");

                    b.Property<long?>("lesson_id")
                        .HasColumnName("lesson_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("optical_form_type_id")
                        .HasColumnName("optical_form_type_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_form_lesson_sections");

                    b.HasIndex("lesson_id")
                        .HasName("ix_form_lesson_sections_lesson_id");

                    b.HasIndex("optical_form_type_id")
                        .HasName("ix_form_lesson_sections_optical_form_type_id");

                    b.ToTable("form_lesson_sections");
                });

            modelBuilder.Entity("TestOkur.Domain.Model.OpticalFormModel.OpticalFormDefinition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "optical_form_definitions_seq")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<bool>("HasBoxForStudentNumber")
                        .HasColumnName("has_box_for_student_number")
                        .HasColumnType("boolean");

                    b.Property<int>("ListOrder")
                        .HasColumnName("list_order")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Path")
                        .HasColumnName("path")
                        .HasColumnType("text");

                    b.Property<int>("StudentNoFillWidth")
                        .HasColumnName("student_no_fill_width")
                        .HasColumnType("integer");

                    b.Property<int>("StudentNoXInterval")
                        .HasColumnName("student_no_xinterval")
                        .HasColumnType("integer");

                    b.Property<int>("StudentNoYInterval")
                        .HasColumnName("student_no_yinterval")
                        .HasColumnType("integer");

                    b.Property<long?>("StudentNumberFillDirectionId")
                        .HasColumnName("student_number_fill_direction_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("TextDirectionId")
                        .HasColumnName("text_direction_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("optical_form_type_id")
                        .HasColumnName("optical_form_type_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("school_type_id")
                        .HasColumnName("school_type_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_optical_form_definitions");

                    b.HasIndex("StudentNumberFillDirectionId")
                        .HasName("ix_optical_form_definitions_student_number_fill_direction_id");

                    b.HasIndex("TextDirectionId")
                        .HasName("ix_optical_form_definitions_text_direction_id");

                    b.HasIndex("optical_form_type_id")
                        .HasName("ix_optical_form_definitions_optical_form_type_id");

                    b.HasIndex("school_type_id")
                        .HasName("ix_optical_form_definitions_school_type_id");

                    b.ToTable("optical_form_definitions");
                });

            modelBuilder.Entity("TestOkur.Domain.Model.OpticalFormModel.OpticalFormTextLocation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "optical_form_text_locations_seq")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<long?>("optical_form_definition_id")
                        .HasColumnName("optical_form_definition_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_optical_form_text_locations");

                    b.HasIndex("optical_form_definition_id")
                        .HasName("ix_optical_form_text_locations_optical_form_definition_id");

                    b.ToTable("optical_form_text_locations");
                });

            modelBuilder.Entity("TestOkur.Domain.Model.OpticalFormModel.OpticalFormType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "optical_form_types_seq")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<string>("ConfigurationFile")
                        .HasColumnName("configuration_file")
                        .HasColumnType("text");

                    b.Property<int>("MaxQuestionCount")
                        .HasColumnName("max_question_count")
                        .HasColumnType("integer");

                    b.Property<long?>("SchoolTypeId")
                        .HasColumnName("school_type_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_optical_form_types");

                    b.HasIndex("SchoolTypeId")
                        .HasName("ix_optical_form_types_school_type_id");

                    b.ToTable("optical_form_types");
                });

            modelBuilder.Entity("TestOkur.Domain.Model.SchoolType", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id")
                        .HasName("pk_school_types");

                    b.ToTable("school_types");
                });

            modelBuilder.Entity("TestOkur.Domain.Model.ScoreModel.FormulaType", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id")
                        .HasName("pk_formula_types");

                    b.ToTable("formula_types");
                });

            modelBuilder.Entity("TestOkur.Domain.Model.ScoreModel.LessonCoefficient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<float>("Coefficient")
                        .HasColumnName("coefficient")
                        .HasColumnType("real");

                    b.Property<long?>("ScoreFormulaId")
                        .HasColumnName("score_formula_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("exam_lesson_section_id")
                        .HasColumnName("exam_lesson_section_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_lesson_coefficients");

                    b.HasIndex("ScoreFormulaId")
                        .HasName("ix_lesson_coefficients_score_formula_id");

                    b.HasIndex("exam_lesson_section_id")
                        .HasName("ix_lesson_coefficients_exam_lesson_section_id");

                    b.ToTable("lesson_coefficients");
                });

            modelBuilder.Entity("TestOkur.Domain.Model.ScoreModel.ScoreFormula", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<float>("BasePoint")
                        .HasColumnName("base_point")
                        .HasColumnType("real");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOnUTC")
                        .HasColumnName("created_on_utc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("FormulaTypeId")
                        .HasColumnName("formula_type_id")
                        .HasColumnType("bigint");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOnUTC")
                        .HasColumnName("updated_on_utc")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id")
                        .HasName("pk_score_formulas");

                    b.HasIndex("CreatedBy")
                        .HasName("ix_score_formulas_created_by");

                    b.HasIndex("FormulaTypeId")
                        .HasName("ix_score_formulas_formula_type_id");

                    b.ToTable("score_formulas");
                });

            modelBuilder.Entity("TestOkur.Domain.Model.SettingModel.AppSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "appsettings_seq")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("Comment")
                        .HasColumnName("comment")
                        .HasColumnType("text");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOnUTC")
                        .HasColumnName("created_on_utc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOnUTC")
                        .HasColumnName("updated_on_utc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnName("value")
                        .HasColumnType("text")
                        .IsUnicode(true);

                    b.HasKey("Id")
                        .HasName("pk_appsettings");

                    b.HasIndex("CreatedBy")
                        .HasName("ix_appsettings_created_by");

                    b.ToTable("appsettings");
                });

            modelBuilder.Entity("TestOkur.Domain.Model.StudentModel.Contact", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOnUTC")
                        .HasColumnName("created_on_utc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Labels")
                        .HasColumnName("labels")
                        .HasColumnType("text");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOnUTC")
                        .HasColumnName("updated_on_utc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("contact_type_id")
                        .HasColumnName("contact_type_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("student_id")
                        .HasColumnName("student_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_contacts");

                    b.HasIndex("CreatedBy")
                        .HasName("ix_contacts_created_by");

                    b.HasIndex("contact_type_id")
                        .HasName("ix_contacts_contact_type_id");

                    b.HasIndex("student_id")
                        .HasName("ix_contacts_student_id");

                    b.ToTable("contacts");
                });

            modelBuilder.Entity("TestOkur.Domain.Model.StudentModel.ContactType", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id")
                        .HasName("pk_contact_types");

                    b.ToTable("contact_types");
                });

            modelBuilder.Entity("TestOkur.Domain.Model.StudentModel.Student", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOnUTC")
                        .HasColumnName("created_on_utc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Notes")
                        .HasColumnName("notes")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Source")
                        .HasColumnName("source")
                        .HasColumnType("text");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOnUTC")
                        .HasColumnName("updated_on_utc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("classroom_id")
                        .HasColumnName("classroom_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_students");

                    b.HasIndex("CreatedBy")
                        .HasName("ix_students_created_by");

                    b.HasIndex("classroom_id")
                        .HasName("ix_students_classroom_id");

                    b.ToTable("students");
                });

            modelBuilder.Entity("TestOkur.Domain.Model.UserModel.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "user_seq")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<long?>("CityId")
                        .HasColumnName("city_id")
                        .HasColumnType("bigint");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOnUTC")
                        .HasColumnName("created_on_utc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("DistrictId")
                        .HasColumnName("district_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Notes")
                        .HasColumnName("notes")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Referrer")
                        .HasColumnName("referrer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int>("SmsBalance")
                        .HasColumnName("sms_balance")
                        .HasColumnType("integer");

                    b.Property<string>("SubjectId")
                        .IsRequired()
                        .HasColumnName("subject_id")
                        .HasColumnType("text");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOnUTC")
                        .HasColumnName("updated_on_utc")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("CityId")
                        .HasName("ix_users_city_id");

                    b.HasIndex("CreatedBy")
                        .HasName("ix_users_created_by");

                    b.HasIndex("DistrictId")
                        .HasName("ix_users_district_id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("TestOkur.Domain.Model.CityModel.City", b =>
                {
                    b.OwnsOne("TestOkur.Domain.Model.Name", "Name", b1 =>
                        {
                            b1.Property<long>("CityId")
                                .HasColumnName("id")
                                .HasColumnType("bigint");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnName("name_value")
                                .HasColumnType("character varying(50)")
                                .HasMaxLength(50)
                                .IsUnicode(true);

                            b1.HasKey("CityId")
                                .HasName("pk_cities");

                            b1.ToTable("cities");

                            b1.WithOwner()
                                .HasForeignKey("CityId")
                                .HasConstraintName("fk_cities_cities_id");
                        });
                });

            modelBuilder.Entity("TestOkur.Domain.Model.CityModel.District", b =>
                {
                    b.HasOne("TestOkur.Domain.Model.CityModel.City", null)
                        .WithMany("Districts")
                        .HasForeignKey("city_id")
                        .HasConstraintName("fk_districts_cities_city_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("TestOkur.Domain.Model.Name", "Name", b1 =>
                        {
                            b1.Property<long>("DistrictId")
                                .HasColumnName("id")
                                .HasColumnType("bigint");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnName("name_value")
                                .HasColumnType("character varying(150)")
                                .HasMaxLength(150)
                                .IsUnicode(true);

                            b1.HasKey("DistrictId")
                                .HasName("pk_districts");

                            b1.ToTable("districts");

                            b1.WithOwner()
                                .HasForeignKey("DistrictId")
                                .HasConstraintName("fk_districts_districts_id");
                        });
                });

            modelBuilder.Entity("TestOkur.Domain.Model.ClassroomModel.Classroom", b =>
                {
                    b.OwnsOne("TestOkur.Domain.Model.Grade", "Grade", b1 =>
                        {
                            b1.Property<long>("ClassroomId")
                                .HasColumnName("id")
                                .HasColumnType("bigint");

                            b1.Property<int>("Value")
                                .HasColumnName("grade_value")
                                .HasColumnType("integer");

                            b1.HasKey("ClassroomId")
                                .HasName("pk_classrooms");

                            b1.ToTable("classrooms");

                            b1.WithOwner()
                                .HasForeignKey("ClassroomId")
                                .HasConstraintName("fk_classrooms_classrooms_id");
                        });

                    b.OwnsOne("TestOkur.Domain.Model.Name", "Name", b1 =>
                        {
                            b1.Property<long>("ClassroomId")
                                .HasColumnName("id")
                                .HasColumnType("bigint");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnName("name_value")
                                .HasColumnType("character varying(50)")
                                .HasMaxLength(50)
                                .IsUnicode(true);

                            b1.HasKey("ClassroomId")
                                .HasName("pk_classrooms");

                            b1.ToTable("classrooms");

                            b1.WithOwner()
                                .HasForeignKey("ClassroomId")
                                .HasConstraintName("fk_classrooms_classrooms_id");
                        });
                });

            modelBuilder.Entity("TestOkur.Domain.Model.ExamModel.Exam", b =>
                {
                    b.HasOne("TestOkur.Domain.Model.ExamModel.ExamBookletType", "ExamBookletType")
                        .WithMany()
                        .HasForeignKey("ExamBookletTypeId")
                        .HasConstraintName("fk_exams_exam_booklet_type_exam_booklet_type_id");

                    b.HasOne("TestOkur.Domain.Model.ExamModel.AnswerFormFormat", "AnswerFormFormat")
                        .WithMany()
                        .HasForeignKey("answer_form_format_id")
                        .HasConstraintName("fk_exams_answer_form_format_answer_form_format_id");

                    b.HasOne("TestOkur.Domain.Model.ExamModel.ExamType", "ExamType")
                        .WithMany()
                        .HasForeignKey("exam_type_id")
                        .HasConstraintName("fk_exams_exam_types_exam_type_id")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TestOkur.Domain.Model.LessonModel.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("lesson_id")
                        .HasConstraintName("fk_exams_lessons_lesson_id")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.OwnsOne("TestOkur.Domain.Model.ExamModel.IncorrectEliminationRate", "IncorrectEliminationRate", b1 =>
                        {
                            b1.Property<long>("ExamId")
                                .HasColumnName("id")
                                .HasColumnType("bigint");

                            b1.Property<int>("Value")
                                .HasColumnName("incorrect_elimination_rate_value")
                                .HasColumnType("integer");

                            b1.HasKey("ExamId")
                                .HasName("pk_exams");

                            b1.ToTable("exams");

                            b1.WithOwner()
                                .HasForeignKey("ExamId")
                                .HasConstraintName("fk_exams_exams_id");
                        });

                    b.OwnsOne("TestOkur.Domain.Model.Name", "Name", b1 =>
                        {
                            b1.Property<long>("ExamId")
                                .HasColumnName("id")
                                .HasColumnType("bigint");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnName("name_value")
                                .HasColumnType("character varying(150)")
                                .HasMaxLength(150)
                                .IsUnicode(true);

                            b1.HasKey("ExamId")
                                .HasName("pk_exams");

                            b1.ToTable("exams");

                            b1.WithOwner()
                                .HasForeignKey("ExamId")
                                .HasConstraintName("fk_exams_exams_id");
                        });
                });

            modelBuilder.Entity("TestOkur.Domain.Model.ExamModel.ExamScanSession", b =>
                {
                    b.HasOne("TestOkur.Domain.Model.ExamModel.Exam", "Exam")
                        .WithMany()
                        .HasForeignKey("exam_id")
                        .HasConstraintName("fk_exam_scan_sessions_exams_exam_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TestOkur.Domain.Model.ExamModel.ExamType", b =>
                {
                    b.OwnsOne("TestOkur.Domain.Model.ExamModel.IncorrectEliminationRate", "DefaultIncorrectEliminationRate", b1 =>
                        {
                            b1.Property<long>("ExamTypeId")
                                .HasColumnName("id")
                                .HasColumnType("bigint");

                            b1.Property<int>("Value")
                                .HasColumnName("default_incorrect_elimination_rate_value")
                                .HasColumnType("integer");

                            b1.HasKey("ExamTypeId")
                                .HasName("pk_exam_types");

                            b1.ToTable("exam_types");

                            b1.WithOwner()
                                .HasForeignKey("ExamTypeId")
                                .HasConstraintName("fk_exam_types_exam_types_id");
                        });

                    b.OwnsOne("TestOkur.Domain.Model.Name", "Name", b1 =>
                        {
                            b1.Property<long>("ExamTypeId")
                                .HasColumnName("id")
                                .HasColumnType("bigint");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnName("name_value")
                                .HasColumnType("character varying(100)")
                                .HasMaxLength(100)
                                .IsUnicode(true);

                            b1.HasKey("ExamTypeId")
                                .HasName("pk_exam_types");

                            b1.ToTable("exam_types");

                            b1.WithOwner()
                                .HasForeignKey("ExamTypeId")
                                .HasConstraintName("fk_exam_types_exam_types_id");
                        });
                });

            modelBuilder.Entity("TestOkur.Domain.Model.ExamModel.ExamTypeOpticalFormType", b =>
                {
                    b.HasOne("TestOkur.Domain.Model.ExamModel.ExamType", null)
                        .WithMany("ExamTypeOpticalFormTypes")
                        .HasForeignKey("ExamTypeId")
                        .HasConstraintName("fk_exam_type_optical_form_types_exam_types_exam_type_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TestOkur.Domain.Model.OpticalFormModel.OpticalFormType", "OpticalFormType")
                        .WithMany()
                        .HasForeignKey("optical_form_type_id")
                        .HasConstraintName("fk_exam_type_optical_form_types_optical_form_types_optical_for~")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TestOkur.Domain.Model.LessonModel.Lesson", b =>
                {
                    b.OwnsOne("TestOkur.Domain.Model.Name", "Name", b1 =>
                        {
                            b1.Property<long>("LessonId")
                                .HasColumnName("id")
                                .HasColumnType("bigint");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnName("name_value")
                                .HasColumnType("character varying(50)")
                                .HasMaxLength(50)
                                .IsUnicode(true);

                            b1.HasKey("LessonId")
                                .HasName("pk_lessons");

                            b1.ToTable("lessons");

                            b1.WithOwner()
                                .HasForeignKey("LessonId")
                                .HasConstraintName("fk_lessons_lessons_id");
                        });
                });

            modelBuilder.Entity("TestOkur.Domain.Model.LessonModel.Subject", b =>
                {
                    b.HasOne("TestOkur.Domain.Model.LessonModel.Unit", null)
                        .WithMany("Subjects")
                        .HasForeignKey("unit_id")
                        .HasConstraintName("fk_subjects_units_unit_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("TestOkur.Domain.Model.Name", "Name", b1 =>
                        {
                            b1.Property<long>("SubjectId")
                                .HasColumnName("id")
                                .HasColumnType("bigint");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnName("name_value")
                                .HasColumnType("character varying(300)")
                                .HasMaxLength(300)
                                .IsUnicode(true);

                            b1.HasKey("SubjectId")
                                .HasName("pk_subjects");

                            b1.ToTable("subjects");

                            b1.WithOwner()
                                .HasForeignKey("SubjectId")
                                .HasConstraintName("fk_subjects_subjects_id");
                        });
                });

            modelBuilder.Entity("TestOkur.Domain.Model.LessonModel.Unit", b =>
                {
                    b.HasOne("TestOkur.Domain.Model.LessonModel.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .HasConstraintName("fk_units_lessons_lesson_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("TestOkur.Domain.Model.Grade", "Grade", b1 =>
                        {
                            b1.Property<long>("UnitId")
                                .HasColumnName("id")
                                .HasColumnType("bigint");

                            b1.Property<int>("Value")
                                .HasColumnName("grade_value")
                                .HasColumnType("integer");

                            b1.HasKey("UnitId")
                                .HasName("pk_units");

                            b1.ToTable("units");

                            b1.WithOwner()
                                .HasForeignKey("UnitId")
                                .HasConstraintName("fk_units_units_id");
                        });

                    b.OwnsOne("TestOkur.Domain.Model.Name", "Name", b1 =>
                        {
                            b1.Property<long>("UnitId")
                                .HasColumnName("id")
                                .HasColumnType("bigint");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnName("name_value")
                                .HasColumnType("character varying(150)")
                                .HasMaxLength(150)
                                .IsUnicode(true);

                            b1.HasKey("UnitId")
                                .HasName("pk_units");

                            b1.ToTable("units");

                            b1.WithOwner()
                                .HasForeignKey("UnitId")
                                .HasConstraintName("fk_units_units_id");
                        });
                });

            modelBuilder.Entity("TestOkur.Domain.Model.OpticalFormModel.FormLessonSection", b =>
                {
                    b.HasOne("TestOkur.Domain.Model.LessonModel.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("lesson_id")
                        .HasConstraintName("fk_form_lesson_sections_lessons_lesson_id")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TestOkur.Domain.Model.OpticalFormModel.OpticalFormType", null)
                        .WithMany("FormLessonSections")
                        .HasForeignKey("optical_form_type_id")
                        .HasConstraintName("fk_form_lesson_sections_optical_form_types_optical_form_type_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TestOkur.Domain.Model.OpticalFormModel.OpticalFormDefinition", b =>
                {
                    b.HasOne("TestOkur.Domain.Model.OpticalFormModel.Direction", "StudentNumberFillDirection")
                        .WithMany()
                        .HasForeignKey("StudentNumberFillDirectionId")
                        .HasConstraintName("fk_optical_form_definitions_directions_student_number_fill_dir~");

                    b.HasOne("TestOkur.Domain.Model.OpticalFormModel.Direction", "TextDirection")
                        .WithMany()
                        .HasForeignKey("TextDirectionId")
                        .HasConstraintName("fk_optical_form_definitions_directions_text_direction_id");

                    b.HasOne("TestOkur.Domain.Model.OpticalFormModel.OpticalFormType", null)
                        .WithMany("OpticalFormDefinitions")
                        .HasForeignKey("optical_form_type_id")
                        .HasConstraintName("fk_optical_form_definitions_optical_form_types_optical_form_ty~")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TestOkur.Domain.Model.SchoolType", "SchoolType")
                        .WithMany()
                        .HasForeignKey("school_type_id")
                        .HasConstraintName("fk_optical_form_definitions_school_types_school_type_id");
                });

            modelBuilder.Entity("TestOkur.Domain.Model.OpticalFormModel.OpticalFormTextLocation", b =>
                {
                    b.HasOne("TestOkur.Domain.Model.OpticalFormModel.OpticalFormDefinition", null)
                        .WithMany("TextLocations")
                        .HasForeignKey("optical_form_definition_id")
                        .HasConstraintName("fk_optical_form_text_locations_optical_form_definitions_optica~")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("TestOkur.Domain.Model.OpticalFormModel.Location", "Class", b1 =>
                        {
                            b1.Property<long>("OpticalFormTextLocationId")
                                .HasColumnName("id")
                                .HasColumnType("bigint");

                            b1.Property<int>("X")
                                .HasColumnName("class_x")
                                .HasColumnType("integer");

                            b1.Property<int>("Y")
                                .HasColumnName("class_y")
                                .HasColumnType("integer");

                            b1.HasKey("OpticalFormTextLocationId")
                                .HasName("pk_optical_form_text_locations");

                            b1.ToTable("optical_form_text_locations");

                            b1.WithOwner()
                                .HasForeignKey("OpticalFormTextLocationId")
                                .HasConstraintName("fk_optical_form_text_locations_optical_form_text_locations_id");
                        });

                    b.OwnsOne("TestOkur.Domain.Model.OpticalFormModel.Location", "CourseName", b1 =>
                        {
                            b1.Property<long>("OpticalFormTextLocationId")
                                .HasColumnName("id")
                                .HasColumnType("bigint");

                            b1.Property<int>("X")
                                .HasColumnName("course_name_x")
                                .HasColumnType("integer");

                            b1.Property<int>("Y")
                                .HasColumnName("course_name_y")
                                .HasColumnType("integer");

                            b1.HasKey("OpticalFormTextLocationId")
                                .HasName("pk_optical_form_text_locations");

                            b1.ToTable("optical_form_text_locations");

                            b1.WithOwner()
                                .HasForeignKey("OpticalFormTextLocationId")
                                .HasConstraintName("fk_optical_form_text_locations_optical_form_text_locations_id");
                        });

                    b.OwnsOne("TestOkur.Domain.Model.OpticalFormModel.Location", "ExamName", b1 =>
                        {
                            b1.Property<long>("OpticalFormTextLocationId")
                                .HasColumnName("id")
                                .HasColumnType("bigint");

                            b1.Property<int>("X")
                                .HasColumnName("exam_name_x")
                                .HasColumnType("integer");

                            b1.Property<int>("Y")
                                .HasColumnName("exam_name_y")
                                .HasColumnType("integer");

                            b1.HasKey("OpticalFormTextLocationId")
                                .HasName("pk_optical_form_text_locations");

                            b1.ToTable("optical_form_text_locations");

                            b1.WithOwner()
                                .HasForeignKey("OpticalFormTextLocationId")
                                .HasConstraintName("fk_optical_form_text_locations_optical_form_text_locations_id");
                        });

                    b.OwnsOne("TestOkur.Domain.Model.OpticalFormModel.Location", "Name", b1 =>
                        {
                            b1.Property<long>("OpticalFormTextLocationId")
                                .HasColumnName("id")
                                .HasColumnType("bigint");

                            b1.Property<int>("X")
                                .HasColumnName("name_x")
                                .HasColumnType("integer");

                            b1.Property<int>("Y")
                                .HasColumnName("name_y")
                                .HasColumnType("integer");

                            b1.HasKey("OpticalFormTextLocationId")
                                .HasName("pk_optical_form_text_locations");

                            b1.ToTable("optical_form_text_locations");

                            b1.WithOwner()
                                .HasForeignKey("OpticalFormTextLocationId")
                                .HasConstraintName("fk_optical_form_text_locations_optical_form_text_locations_id");
                        });

                    b.OwnsOne("TestOkur.Domain.Model.OpticalFormModel.Location", "StudentNo", b1 =>
                        {
                            b1.Property<long>("OpticalFormTextLocationId")
                                .HasColumnName("id")
                                .HasColumnType("bigint");

                            b1.Property<int>("X")
                                .HasColumnName("student_no_x")
                                .HasColumnType("integer");

                            b1.Property<int>("Y")
                                .HasColumnName("student_no_y")
                                .HasColumnType("integer");

                            b1.HasKey("OpticalFormTextLocationId")
                                .HasName("pk_optical_form_text_locations");

                            b1.ToTable("optical_form_text_locations");

                            b1.WithOwner()
                                .HasForeignKey("OpticalFormTextLocationId")
                                .HasConstraintName("fk_optical_form_text_locations_optical_form_text_locations_id");
                        });

                    b.OwnsOne("TestOkur.Domain.Model.OpticalFormModel.Location", "StudentNoFillingPart", b1 =>
                        {
                            b1.Property<long>("OpticalFormTextLocationId")
                                .HasColumnName("id")
                                .HasColumnType("bigint");

                            b1.Property<int>("X")
                                .HasColumnName("student_no_filling_part_x")
                                .HasColumnType("integer");

                            b1.Property<int>("Y")
                                .HasColumnName("student_no_filling_part_y")
                                .HasColumnType("integer");

                            b1.HasKey("OpticalFormTextLocationId")
                                .HasName("pk_optical_form_text_locations");

                            b1.ToTable("optical_form_text_locations");

                            b1.WithOwner()
                                .HasForeignKey("OpticalFormTextLocationId")
                                .HasConstraintName("fk_optical_form_text_locations_optical_form_text_locations_id");
                        });

                    b.OwnsOne("TestOkur.Domain.Model.OpticalFormModel.Location", "Surname", b1 =>
                        {
                            b1.Property<long>("OpticalFormTextLocationId")
                                .HasColumnName("id")
                                .HasColumnType("bigint");

                            b1.Property<int>("X")
                                .HasColumnName("surname_x")
                                .HasColumnType("integer");

                            b1.Property<int>("Y")
                                .HasColumnName("surname_y")
                                .HasColumnType("integer");

                            b1.HasKey("OpticalFormTextLocationId")
                                .HasName("pk_optical_form_text_locations");

                            b1.ToTable("optical_form_text_locations");

                            b1.WithOwner()
                                .HasForeignKey("OpticalFormTextLocationId")
                                .HasConstraintName("fk_optical_form_text_locations_optical_form_text_locations_id");
                        });

                    b.OwnsOne("TestOkur.Domain.Model.OpticalFormModel.Location", "Title1", b1 =>
                        {
                            b1.Property<long>("OpticalFormTextLocationId")
                                .HasColumnName("id")
                                .HasColumnType("bigint");

                            b1.Property<int>("X")
                                .HasColumnName("title1_x")
                                .HasColumnType("integer");

                            b1.Property<int>("Y")
                                .HasColumnName("title1_y")
                                .HasColumnType("integer");

                            b1.HasKey("OpticalFormTextLocationId")
                                .HasName("pk_optical_form_text_locations");

                            b1.ToTable("optical_form_text_locations");

                            b1.WithOwner()
                                .HasForeignKey("OpticalFormTextLocationId")
                                .HasConstraintName("fk_optical_form_text_locations_optical_form_text_locations_id");
                        });

                    b.OwnsOne("TestOkur.Domain.Model.OpticalFormModel.Location", "Title2", b1 =>
                        {
                            b1.Property<long>("OpticalFormTextLocationId")
                                .HasColumnName("id")
                                .HasColumnType("bigint");

                            b1.Property<int>("X")
                                .HasColumnName("title2_x")
                                .HasColumnType("integer");

                            b1.Property<int>("Y")
                                .HasColumnName("title2_y")
                                .HasColumnType("integer");

                            b1.HasKey("OpticalFormTextLocationId")
                                .HasName("pk_optical_form_text_locations");

                            b1.ToTable("optical_form_text_locations");

                            b1.WithOwner()
                                .HasForeignKey("OpticalFormTextLocationId")
                                .HasConstraintName("fk_optical_form_text_locations_optical_form_text_locations_id");
                        });
                });

            modelBuilder.Entity("TestOkur.Domain.Model.OpticalFormModel.OpticalFormType", b =>
                {
                    b.HasOne("TestOkur.Domain.Model.SchoolType", "SchoolType")
                        .WithMany()
                        .HasForeignKey("SchoolTypeId")
                        .HasConstraintName("fk_optical_form_types_school_types_school_type_id");

                    b.OwnsOne("TestOkur.Domain.Model.Name", "Name", b1 =>
                        {
                            b1.Property<long>("OpticalFormTypeId")
                                .HasColumnName("id")
                                .HasColumnType("bigint");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnName("name_value")
                                .HasColumnType("character varying(100)")
                                .HasMaxLength(100)
                                .IsUnicode(true);

                            b1.HasKey("OpticalFormTypeId")
                                .HasName("pk_optical_form_types");

                            b1.ToTable("optical_form_types");

                            b1.WithOwner()
                                .HasForeignKey("OpticalFormTypeId")
                                .HasConstraintName("fk_optical_form_types_optical_form_types_id");
                        });
                });

            modelBuilder.Entity("TestOkur.Domain.Model.ScoreModel.LessonCoefficient", b =>
                {
                    b.HasOne("TestOkur.Domain.Model.ScoreModel.ScoreFormula", null)
                        .WithMany("Coefficients")
                        .HasForeignKey("ScoreFormulaId")
                        .HasConstraintName("fk_lesson_coefficients_score_formulas_score_formula_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TestOkur.Domain.Model.OpticalFormModel.FormLessonSection", "ExamLessonSection")
                        .WithMany()
                        .HasForeignKey("exam_lesson_section_id")
                        .HasConstraintName("fk_lesson_coefficients_form_lesson_sections_exam_lesson_sectio~");
                });

            modelBuilder.Entity("TestOkur.Domain.Model.ScoreModel.ScoreFormula", b =>
                {
                    b.HasOne("TestOkur.Domain.Model.ScoreModel.FormulaType", "FormulaType")
                        .WithMany()
                        .HasForeignKey("FormulaTypeId")
                        .HasConstraintName("fk_score_formulas_formula_types_formula_type_id");

                    b.OwnsOne("TestOkur.Domain.Model.Grade", "Grade", b1 =>
                        {
                            b1.Property<long>("ScoreFormulaId")
                                .HasColumnName("id")
                                .HasColumnType("bigint");

                            b1.Property<int>("Value")
                                .HasColumnName("grade_value")
                                .HasColumnType("integer");

                            b1.HasKey("ScoreFormulaId")
                                .HasName("pk_score_formulas");

                            b1.ToTable("score_formulas");

                            b1.WithOwner()
                                .HasForeignKey("ScoreFormulaId")
                                .HasConstraintName("fk_score_formulas_score_formulas_id");
                        });

                    b.OwnsOne("TestOkur.Domain.Model.Name", "Name", b1 =>
                        {
                            b1.Property<long>("ScoreFormulaId")
                                .HasColumnName("id")
                                .HasColumnType("bigint");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnName("name_value")
                                .HasColumnType("character varying(20)")
                                .HasMaxLength(20)
                                .IsUnicode(true);

                            b1.HasKey("ScoreFormulaId")
                                .HasName("pk_score_formulas");

                            b1.ToTable("score_formulas");

                            b1.WithOwner()
                                .HasForeignKey("ScoreFormulaId")
                                .HasConstraintName("fk_score_formulas_score_formulas_id");
                        });
                });

            modelBuilder.Entity("TestOkur.Domain.Model.SettingModel.AppSetting", b =>
                {
                    b.OwnsOne("TestOkur.Domain.Model.Name", "Name", b1 =>
                        {
                            b1.Property<long>("AppSettingId")
                                .HasColumnName("id")
                                .HasColumnType("bigint");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnName("name_value")
                                .HasColumnType("character varying(100)")
                                .HasMaxLength(100)
                                .IsUnicode(true);

                            b1.HasKey("AppSettingId")
                                .HasName("pk_appsettings");

                            b1.ToTable("appsettings");

                            b1.WithOwner()
                                .HasForeignKey("AppSettingId")
                                .HasConstraintName("fk_appsettings_appsettings_id");
                        });
                });

            modelBuilder.Entity("TestOkur.Domain.Model.StudentModel.Contact", b =>
                {
                    b.HasOne("TestOkur.Domain.Model.StudentModel.ContactType", "ContactType")
                        .WithMany()
                        .HasForeignKey("contact_type_id")
                        .HasConstraintName("fk_contacts_contact_types_contact_type_id");

                    b.HasOne("TestOkur.Domain.Model.StudentModel.Student", null)
                        .WithMany("Contacts")
                        .HasForeignKey("student_id")
                        .HasConstraintName("fk_contacts_students_student_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("TestOkur.Domain.Model.Name", "FirstName", b1 =>
                        {
                            b1.Property<long>("ContactId")
                                .HasColumnName("id")
                                .HasColumnType("bigint");

                            b1.Property<string>("Value")
                                .HasColumnName("first_name_value")
                                .HasColumnType("text");

                            b1.HasKey("ContactId")
                                .HasName("pk_contacts");

                            b1.ToTable("contacts");

                            b1.WithOwner()
                                .HasForeignKey("ContactId")
                                .HasConstraintName("fk_contacts_contacts_id");
                        });

                    b.OwnsOne("TestOkur.Domain.Model.Name", "LastName", b1 =>
                        {
                            b1.Property<long>("ContactId")
                                .HasColumnName("id")
                                .HasColumnType("bigint");

                            b1.Property<string>("Value")
                                .HasColumnName("last_name_value")
                                .HasColumnType("text");

                            b1.HasKey("ContactId")
                                .HasName("pk_contacts");

                            b1.ToTable("contacts");

                            b1.WithOwner()
                                .HasForeignKey("ContactId")
                                .HasConstraintName("fk_contacts_contacts_id");
                        });

                    b.OwnsOne("TestOkur.Domain.Model.Phone", "Phone", b1 =>
                        {
                            b1.Property<long>("ContactId")
                                .HasColumnName("id")
                                .HasColumnType("bigint");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnName("phone_value")
                                .HasColumnType("character varying(20)")
                                .HasMaxLength(20);

                            b1.HasKey("ContactId")
                                .HasName("pk_contacts");

                            b1.ToTable("contacts");

                            b1.WithOwner()
                                .HasForeignKey("ContactId")
                                .HasConstraintName("fk_contacts_contacts_id");
                        });
                });

            modelBuilder.Entity("TestOkur.Domain.Model.StudentModel.Student", b =>
                {
                    b.HasOne("TestOkur.Domain.Model.ClassroomModel.Classroom", "Classroom")
                        .WithMany()
                        .HasForeignKey("classroom_id")
                        .HasConstraintName("fk_students_classrooms_classroom_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("TestOkur.Domain.Model.Name", "FirstName", b1 =>
                        {
                            b1.Property<long>("StudentId")
                                .HasColumnName("id")
                                .HasColumnType("bigint");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnName("first_name_value")
                                .HasColumnType("character varying(50)")
                                .HasMaxLength(50)
                                .IsUnicode(true);

                            b1.HasKey("StudentId")
                                .HasName("pk_students");

                            b1.ToTable("students");

                            b1.WithOwner()
                                .HasForeignKey("StudentId")
                                .HasConstraintName("fk_students_students_id");
                        });

                    b.OwnsOne("TestOkur.Domain.Model.Name", "LastName", b1 =>
                        {
                            b1.Property<long>("StudentId")
                                .HasColumnName("id")
                                .HasColumnType("bigint");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnName("last_name_value")
                                .HasColumnType("character varying(50)")
                                .HasMaxLength(50)
                                .IsUnicode(true);

                            b1.HasKey("StudentId")
                                .HasName("pk_students");

                            b1.ToTable("students");

                            b1.WithOwner()
                                .HasForeignKey("StudentId")
                                .HasConstraintName("fk_students_students_id");
                        });

                    b.OwnsOne("TestOkur.Domain.Model.StudentNumber", "StudentNumber", b1 =>
                        {
                            b1.Property<long>("StudentId")
                                .HasColumnName("id")
                                .HasColumnType("bigint");

                            b1.Property<int>("Value")
                                .HasColumnName("student_number_value")
                                .HasColumnType("integer");

                            b1.HasKey("StudentId")
                                .HasName("pk_students");

                            b1.ToTable("students");

                            b1.WithOwner()
                                .HasForeignKey("StudentId")
                                .HasConstraintName("fk_students_students_id");
                        });
                });

            modelBuilder.Entity("TestOkur.Domain.Model.UserModel.User", b =>
                {
                    b.HasOne("TestOkur.Domain.Model.CityModel.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .HasConstraintName("fk_users_cities_city_id")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TestOkur.Domain.Model.CityModel.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("fk_users_districts_district_id")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.OwnsOne("TestOkur.Domain.Model.Email", "Email", b1 =>
                        {
                            b1.Property<long>("UserId")
                                .HasColumnName("id")
                                .HasColumnType("bigint");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnName("email_value")
                                .HasColumnType("character varying(255)")
                                .HasMaxLength(255);

                            b1.HasKey("UserId")
                                .HasName("pk_users");

                            b1.ToTable("users");

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_users_users_id");
                        });

                    b.OwnsOne("TestOkur.Domain.Model.Name", "FirstName", b1 =>
                        {
                            b1.Property<long>("UserId")
                                .HasColumnName("id")
                                .HasColumnType("bigint");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnName("first_name_value")
                                .HasColumnType("character varying(100)")
                                .HasMaxLength(100)
                                .IsUnicode(true);

                            b1.HasKey("UserId")
                                .HasName("pk_users");

                            b1.ToTable("users");

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_users_users_id");
                        });

                    b.OwnsOne("TestOkur.Domain.Model.Name", "LastName", b1 =>
                        {
                            b1.Property<long>("UserId")
                                .HasColumnName("id")
                                .HasColumnType("bigint");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnName("last_name_value")
                                .HasColumnType("character varying(100)")
                                .HasMaxLength(100)
                                .IsUnicode(true);

                            b1.HasKey("UserId")
                                .HasName("pk_users");

                            b1.ToTable("users");

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_users_users_id");
                        });

                    b.OwnsOne("TestOkur.Domain.Model.Name", "RegistrarFullName", b1 =>
                        {
                            b1.Property<long>("UserId")
                                .HasColumnName("id")
                                .HasColumnType("bigint");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnName("registrar_full_name_value")
                                .HasColumnType("character varying(200)")
                                .HasMaxLength(200)
                                .IsUnicode(true);

                            b1.HasKey("UserId")
                                .HasName("pk_users");

                            b1.ToTable("users");

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_users_users_id");
                        });

                    b.OwnsOne("TestOkur.Domain.Model.Name", "SchoolName", b1 =>
                        {
                            b1.Property<long>("UserId")
                                .HasColumnName("id")
                                .HasColumnType("bigint");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnName("school_name_value")
                                .HasColumnType("character varying(150)")
                                .HasMaxLength(150)
                                .IsUnicode(true);

                            b1.HasKey("UserId")
                                .HasName("pk_users");

                            b1.ToTable("users");

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_users_users_id");
                        });

                    b.OwnsOne("TestOkur.Domain.Model.Phone", "Phone", b1 =>
                        {
                            b1.Property<long>("UserId")
                                .HasColumnName("id")
                                .HasColumnType("bigint");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnName("phone_value")
                                .HasColumnType("character varying(20)")
                                .HasMaxLength(20);

                            b1.HasKey("UserId")
                                .HasName("pk_users");

                            b1.ToTable("users");

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_users_users_id");
                        });

                    b.OwnsOne("TestOkur.Domain.Model.Phone", "RegistrarPhone", b1 =>
                        {
                            b1.Property<long>("UserId")
                                .HasColumnName("id")
                                .HasColumnType("bigint");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnName("registrar_phone_value")
                                .HasColumnType("character varying(20)")
                                .HasMaxLength(20);

                            b1.HasKey("UserId")
                                .HasName("pk_users");

                            b1.ToTable("users");

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_users_users_id");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
